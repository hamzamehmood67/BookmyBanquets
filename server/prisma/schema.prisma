generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== MODELS ==========

model User {
  userId    String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  halls     Hall[]
  bookings  Booking[]
  reviews   Review[]
  chatsFrom Chat[]    @relation("ChatFrom")
  chatsTo   Chat[]    @relation("ChatTo")
  messages  Message[] @relation("MessageFrom")
}

model Admin {
  adminId  String @id @default(uuid())
  email    String @unique
  password String
}

model Address {
  addressId   String @id @default(uuid())
  addressLine String
  city        String
  state       String
  country     String

  halls Hall[]
}

model Hall {
  hallId      String @id @default(uuid())
  name        String
  description String
  capacity    Int
  price       Float
  imageURLs   String // comma-separated or change to String[]
  status      String

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  addressId String
  address   Address @relation(fields: [addressId], references: [addressId])

  bookings  Booking[]
  reviews   Review[]
  amenities AmenitiesHall[]
}

model Booking {
  bookingId      String   @id @default(uuid())
  status         String
  createdAt      DateTime @default(now())
  startDate      DateTime
  endDate        DateTime
  days           Int
  bookingDetails String
  price          Float
  guests         Int

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  hallId String
  hall   Hall   @relation(fields: [hallId], references: [hallId])
}

model Review {
  reviewId String @id @default(uuid())
  rating   Int
  comment  String

  hallId String
  hall   Hall   @relation(fields: [hallId], references: [hallId])

  userId String
  user   User   @relation(fields: [userId], references: [userId])
}

model Chat {
  chatId    String   @id @default(uuid())
  createdAt DateTime @default(now())

  fromId String
  from   User   @relation("ChatFrom", fields: [fromId], references: [userId])

  toId String
  to   User   @relation("ChatTo", fields: [toId], references: [userId])

  messages Message[]
}

model Message {
  messageId String   @id @default(uuid())
  text      String
  sentAt    DateTime @default(now())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [chatId])

  fromId String
  from   User   @relation("MessageFrom", fields: [fromId], references: [userId])
}

model Amenity {
  amenityId   String @id @default(uuid())
  name        String
  description String

  halls AmenitiesHall[]
}

model AmenitiesHall {
  hallId    String
  amenityId String

  hall    Hall    @relation(fields: [hallId], references: [hallId])
  amenity Amenity @relation(fields: [amenityId], references: [amenityId])

  @@id([hallId, amenityId])
}
